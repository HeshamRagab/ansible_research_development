- name: configuring SSL for kibana
  include: tasks/sslconfigure.yml

- name: calculating the recommended number of masters to elasticsearch cluster
  set_fact:
    nomasters: "{{ ((groups['esearsh'] | length ) / 2 + 1) | int }}"
- name: generating var to get registry_ips
  set_fact:
    registry_ips: "{{ groups['esearsh'] | list }}"
- name: generating var to hold hostnames of registry
  set_fact:
    registry_hostnames: "{{ groups['esearsh'] | map('extract', hostvars) | map(attribute='ansible_hostname') | list }}"
- name: debugging var
  ansible.builtin.debug:
    msg: "var = {{ nomasters }}"

- name: Update the /etc/hosts file with node name
  lineinfile:
    path: "/etc/hosts"
    regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
    line: "{{ hostvars[item]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
    state: present
    backup: yes

  when: ansible_hostname != "{{ item }}" or ansible_hostname == "{{ item }}"
  with_items: "{{groups['esearsh']}}"
- name: Installing apt-transport-https
  block:
    - name: Installing apt-transport-https
      apt:
        pkg: apt-transport-https
        update_cache: yes
        state: present

- name: adding key and repo of Elastic Search
  block:
    - name: Elastic Search apt key
      ansible.builtin.apt_key:
        url: https://artifacts.elastic.co/GPG-KEY-elasticsearch

    - name: Installing apt-transport-https
      apt:
        pkg: apt-transport-https
        update_cache: yes
        state: present

    - name: Elastic Search apt source
      ansible.builtin.apt_repository:
        repo: "deb https://artifacts.elastic.co/packages/8.x/apt stable main"
        state: present

- name: Installing required packages for kibana
  apt:
    pkg: "{{ item }}"
    update_cache: yes
    state: present
  loop:
    - openjdk-11-jdk
    - kibana

- name: configuring kibana block
  block:
    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        regexp: "^elasticsearch.*"
        state: absent

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: "#elasticsearch.ssl.key: {{ wrk_dir }}/cert-key.pem"
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: "#elasticsearch.ssl.certificate: {{ wrk_dir }}/cert.pem"
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        regexp: "^elasticsearch.ssl.certificate_authorities"
        state: absent

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'elasticsearch.ssl.certificateAuthorities: [ "{{ wrk_dir }}/ca.pem" ]'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'server.host: "{{ ansible_host }}"'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'server.name: "{{ ansible_hostname }}"'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'elasticsearch.username: "kibana_system"'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'elasticsearch.password: "{{ kibanapassword }}"'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: 'elasticsearch.hosts: [{% for ip in registry_ips %}"https://{{ ip }}:9200"{% if not loop.last %}, {% endif %}{% endfor %}]'
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: "server.ssl.enabled: true"
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: "server.ssl.certificate: {{ wrk_dir }}/cert.pem"
        state: present

    - ansible.builtin.lineinfile:
        path: /etc/kibana/kibana.yml
        line: "server.ssl.key: {{ wrk_dir }}/cert-key.pem"
        state: present

# - command: "chmod -R o+rxw {{ wrk_dir }}"
# - name: fetching ssl certs for using on kibana
#   copy:
#     src: files/certs/{{ item }}
#     dest: "{{ wrk_dir }}/{{ item }}"
#     owner: kibana
#     group: kibana
#   loop:
#     - "ca.pem"
#     - "cert.pem"
#     - "cert-key.pem"

- name: systemctl start/enable kibana
  systemd:
    daemon_reload: yes
    name: kibana
    state: restarted
    enabled: yes
    masked: no
